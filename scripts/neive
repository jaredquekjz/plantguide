#!/usr/bin/env bash
set -euo pipefail

# neive: single-word wrapper to normalize EIVE names to WFO IDs
# Defaults aim for exact-only matching (fuzzy off).

EIVE_CSV=${EIVE_CSV:-"data/EIVE_Paper_1.0_SM_08_csv/mainTable.csv"}
WFO_CSV=${WFO_CSV:-"data/WFO/classification.csv"}
OUT_CSV=${OUT_CSV:-"artifacts/EIVE_TaxonConcept_WFO.csv"}
FUZZY=${FUZZY:-0}
BATCH_SIZE=${BATCH_SIZE:-1000}
CHECKPOINT_EVERY=${CHECKPOINT_EVERY:-0}

usage() {
  cat <<EOF
Usage: neive [--eive_csv PATH] [--wfo_csv PATH] [--out PATH] [--fuzzy 0|1] [--batch_size N] [--checkpoint_every N]

Defaults:
  --eive_csv "$EIVE_CSV"
  --wfo_csv  "$WFO_CSV"
  --out      "$OUT_CSV"
  --fuzzy    $FUZZY
  --batch_size $BATCH_SIZE
  --checkpoint_every $CHECKPOINT_EVERY

Env overrides supported: EIVE_CSV, WFO_CSV, OUT_CSV, FUZZY, BATCH_SIZE, CHECKPOINT_EVERY
EOF
}

# Simple arg parser supporting --key value and --key=value
parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help) usage; exit 0 ;;
      --eive_csv) EIVE_CSV=${2:?}; shift ;;
      --eive_csv=*) EIVE_CSV=${1#*=} ;;
      --wfo_csv) WFO_CSV=${2:?}; shift ;;
      --wfo_csv=*) WFO_CSV=${1#*=} ;;
      --out) OUT_CSV=${2:?}; shift ;;
      --out=*) OUT_CSV=${1#*=} ;;
      --fuzzy) FUZZY=${2:?}; shift ;;
      --fuzzy=*) FUZZY=${1#*=} ;;
      --batch_size) BATCH_SIZE=${2:?}; shift ;;
      --batch_size=*) BATCH_SIZE=${1#*=} ;;
      --checkpoint_every) CHECKPOINT_EVERY=${2:?}; shift ;;
      --checkpoint_every=*) CHECKPOINT_EVERY=${1#*=} ;;
      *) echo "Unknown arg: $1" >&2; usage; exit 2 ;;
    esac
    shift || true
  done
}

main() {
  parse_args "$@"

  [[ -f "$EIVE_CSV" ]] || { echo "Missing EIVE CSV: $EIVE_CSV" >&2; exit 1; }
  [[ -f "$WFO_CSV" ]] || { echo "Missing WFO CSV: $WFO_CSV" >&2; exit 1; }
  mkdir -p "$(dirname "$OUT_CSV")"

  echo "Running normalize_eive_to_wfo with:"
  echo "  --eive_csv=$EIVE_CSV"
  echo "  --wfo_csv=$WFO_CSV"
  echo "  --out=$OUT_CSV"
  echo "  --fuzzy=$FUZZY"
  echo "  --batch_size=$BATCH_SIZE"
  echo "  --checkpoint_every=$CHECKPOINT_EVERY"

  Rscript scripts/normalize_eive_to_wfo.R -- \
    --eive_csv="$EIVE_CSV" \
    --wfo_csv="$WFO_CSV" \
    --out="$OUT_CSV" \
    --fuzzy="$FUZZY" \
    --batch_size="$BATCH_SIZE" \
    --checkpoint_every="$CHECKPOINT_EVERY"

  if [[ -f "$OUT_CSV" ]]; then
    rows=$(wc -l < "$OUT_CSV" || echo 0)
    size=$(du -h "$OUT_CSV" | awk '{print $1}')
    echo "Wrote: $OUT_CSV (rows: $((rows>0 ? rows-1 : 0)), size: $size)"
  else
    echo "Output not created: $OUT_CSV" >&2
    exit 3
  fi
}

main "$@"

